-- JOIN 
-- 이항 연산이다. 두개의 테이블을 합산하는 것이다. 
SELECT * FROM CUSTOMER, ORDERS; -- 모든 튜플의 조합을 보여준다. 고객이 5명, 주문이 10개이면 50개의 행이 출력된다. 
-- 데이터의 무결성이 유지되지 못하기 때문에 JOIN 조건을 통해 유지한다.
-- 조건을 작성하지않으면 단순히 카티션 프로덕트 (cartesian product)가 수행된다.

SELECT * FROM CUSTOMER, ORDERS 
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID 
ORDER BY CUSTOMER.CUSTID; -- 보통 기본키와 외래키로 조건을 작성한다.

SELECT NAME, SALEPRICE 
FROM CUSTOMER, ORDERS 
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID 
ORDER BY CUSTOMER.CUSTID;

SELECT NAME, SUM(SALEPRICE) 
FROM CUSTOMER, ORDERS 
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID 
GROUP BY CUSTOMER.NAME -- GROUP BY를 작성하면 SELECT절에 해당 열과 집계함수만 작성할 수 있다.
ORDER BY CUSTOMER.NAME;

SELECT CUSTOMER.NAME, BOOK.BOOKNAME
FROM CUSTOMER, BOOK, ORDERS
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
    AND ORDERS.BOOKID = BOOK.BOOKID;

SELECT CUSTOMER.NAME, BOOK.BOOKNAME
FROM CUSTOMER, ORDERS, BOOK
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
    AND ORDERS.BOOKID = BOOK.BOOKID
    AND BOOK.PRICE = 20000;

-- 외부 조인: 한쪽에 데이터가 있고, 한쪽에 데이터가 없는 경우, 있는 쪽을 기준으로 내용을 모두 출력하는 것이다. 조건에 안맞아도 출력할 수 있다.
SELECT CUSTOMER.NAME, SALEPRICE
FROM CUSTOMER LEFT OUTER JOIN ORDERS -- 대상이 되는 테이블 명 작성
    ON CUSTOMER.CUSTID = ORDERS.CUSTID; -- ON 뒤에 조인 조건 명시.
